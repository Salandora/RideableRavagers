import java.nio.file.Files

plugins {
    id "io.github.rancraftplayz.remapper" version "1.0.2"
}

apply plugin: libs.plugins.paperweight.userdev.get().getPluginId()

def serverDir = rootProject.file("run/ignite_purpur")
def pluginsDir = new File(serverDir, "plugins")
def modDir = new File(serverDir, "mods")

base.archivesName = "${mod_name}-ignite_purpur-${libs.versions.minecraft.get()}"

repositories {
    mavenCentral()
    maven {
        name = "PurpurMC"
        url = uri("https://repo.purpurmc.org/snapshots")
    }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = "https://maven.elmakers.com/repository/" }
    maven { url = "https://api.modrinth.com/maven" }
}

dependencies {
    paperweight.devBundle("org.purpurmc.purpur", libs.versions.purpur.api.get())
    remapLib "org.purpurmc.purpur:purpur-server:userdev-${libs.versions.purpur.api.get()}"
    /*if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidener project(":common").fileTree(dir: 'src/main/resources', include: ['*.accesswidener'])
    }*/
    // accessWidenerLib "org.purpurmc.purpur:purpur-server:userdev-${libs.versions.spigot.api.get()}"

    implementation libs.ignite
    implementation libs.mixin

    //implementation libs.midnightlib.fabric

    // Add your dependencies here
    // Here are some opinionated dependencies that might help you with your plugin development:
    compileOnly(project(":common"))
}

spigot {
    version = libs.versions.minecraft.get()
}

jar.finalizedBy(remapJar)

tasks {
    assemble {
        dependsOn(reobfJar)
    }

    processResources {
        from(project(":common").sourceSets.main.resources) {
            exclude "architectury.common.json"
        }

        doLast {
            fileTree(dir: outputs.files.asPath, include: "*.mixins.json").each {
                File file ->
                    def jsonContent = new groovy.json.JsonSlurper().parse(file)

                    jsonContent.remove("client")
                    jsonContent.compatibilityLevel = "JAVA_16"

                    file.text = new groovy.json.JsonBuilder(jsonContent).toPrettyString()
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        source(project(":common").sourceSets.main.allSource)

        exclude "com/github/salandora/rideableravagers/config/**"
        exclude "com/github/salandora/rideableravagers/mixins/client/**"
    }
    tasks.withType(Javadoc).configureEach {
        source(project(":common").sourceSets.main.allJava)

        exclude "com/github/salandora/rideableravagers/config/**"
        exclude "com/github/salandora/rideableravagers/mixins/client/**"
    }
    tasks.named("sourcesJar", Jar) {
        from(project(":common").sourceSets.main.allSource)

        exclude "com/github/salandora/rideableravagers/config/**"
        exclude "com/github/salandora/rideableravagers/mixins/client/**"
    }

    clean {
        doLast {
            modDir.deleteDir()
        }
    }

    tasks.register("downloadServer") {
        group = "purpur"
        doFirst {
            serverDir.mkdirs()
            pluginsDir.mkdirs()
            modDir.mkdirs()
            new URL("https://api.purpurmc.org/v2/purpur/${libs.versions.minecraft.get()}/latest/download").openStream().withStream {
                Files.copy(it, new File(serverDir, "purpur.jar").toPath())
            }
        }
    }

    tasks.register("downloadIgnite") {
        group = "purpur"
        doFirst {
            modDir.mkdirs()
            new URL("https://github.com/vectrix-space/ignite/releases/download/v0.8.1/ignite-launcher.jar").openStream().withStream {
                Files.copy(it, new File(serverDir, "ignite-launcher.jar").toPath())
            }
        }
    }

    tasks.register("copyMod") {
        group = "purpur"
        doFirst {
            new File(modDir, "${base.archivesName.get()}.jar").delete()
        }

        dependsOn(reobfJar)

        doLast {
            modDir.mkdirs()
            Files.copy(layout.buildDirectory.file("libs/${base.archivesName.get()}-${version}.jar").get().asFile.toPath(), new File(modDir, "${base.archivesName.get()}.jar").toPath())
        }
    }

    tasks.register("runIgniteServer", JavaExec) {
        group = "purpur"

        if (!new File(serverDir, "purpur.jar").exists()) {
            dependsOn("downloadServer")
        }
        if (!new File(serverDir, "ignite-launcher.jar").exists()) {
            dependsOn("downloadIgnite")
        }

        dependsOn('copyMod')

        classpath = files(new File(serverDir, "ignite-launcher.jar"))
        jvmArgs = [
            "-Dignite.service=paper",
            "-Dignite.jar=./versions/${libs.versions.minecraft.get()}/purpur-${libs.versions.minecraft.get()}.jar",
            "-Dignite.paper.jar=./purpur.jar",
            "-Dignite.paper.minecraft=${libs.versions.minecraft.get()}",
            "-Dignite.paper.override=false",
            "-Dcom.mojang.eula.agree=true"
        ]
        args = [
    //        "--nogui"
        ]
        workingDir = serverDir
        standardInput = System.in
    }
}
