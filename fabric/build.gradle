plugins {
    alias libs.plugins.fabric.loom
}

base.archivesName = "${mod_name}-fabric-${libs.versions.minecraft.get()}"

def dependencyProjects = [
    project.dependencies.project(path: ":common", configuration: "namedElements")
]

dependencyProjects.forEach {
    project.evaluationDependsOn(it.dependencyProject.path)
}

dependencies {
    minecraft libs.minecraft
    mappings loom.officialMojangMappings()

    modImplementation libs.fabric.loader
    modImplementation libs.fabric.api

    dependencyProjects.forEach {
        implementation it
        if (it.dependencyProject.hasProperty("sourceSets.client")) {
            clientImplementation it.dependencyProject.sourceSets.client.output
        }
    }
}

loom {
    runtimeOnlyLog4j = true

    if (file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(file("src/main/resources/${mod_id}.accesswidener"))
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
            dependencyProjects.each {
                sourceSet it.dependencyProject.sourceSets.main
                if (it.dependencyProject.hasProperty("sourceSets.client")) {
                    sourceSet it.dependencyProject.sourceSets.client
                }
            }
        }
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
        }
        server {
            server()
            setConfigName("Fabric Server")
        }

        configureEach {
            ideConfigGenerated(true)
            runDir "../run/${it.configName.replace(' ', '_')}"
        }
    }
}

tasks {
    processResources {
        from(sourceSets.main.resources)
        for (p in dependencyProjects) {
            from(p.dependencyProject.sourceSets.main.resources)
            if (p.dependencyProject.hasProperty("sourceSets.client")) {
                from(p.dependencyProject.sourceSets.client.resources)
            }
        }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    jar {
        from(sourceSets.main.output)
        for (p in dependencyProjects) {
            from(p.dependencyProject.sourceSets.main.output)
            if (p.dependencyProject.hasProperty("sourceSets.client")) {
                from(p.dependencyProject.sourceSets.client.output)
            }
        }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    sourcesJar {
        from(sourceSets.main.allJava)
        for (p in dependencyProjects) {
            from(p.dependencyProject.sourceSets.main.allJava)
            if (p.hasProperty("sourceSets.client")) {
                from(p.dependencyProject.sourceSets.client.allJava)
            }
        }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}