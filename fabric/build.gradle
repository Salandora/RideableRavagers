apply plugin: libs.plugins.shadow.get().getPluginId()

if (System.getenv("CURSEFORGE_TOKEN")) {
    apply plugin: libs.plugins.cursegradle.get().getPluginId()
}

evaluationDependsOn(":common")

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
}

loom {
    runtimeOnlyLog4j = true

    accessWidenerPath.set(project(":common").loom.accessWidenerPath)

    runs {
        client {
            client()
            setConfigName("Fabric Client")
        }
        server {
            server()
            setConfigName("Fabric Server")
        }

        configureEach {
            runDir "../run/${it.configName.replace(' ', '_')}"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation libs.fabric.loader
    modApi libs.fabric.api

    modImplementation libs.midnightlib.fabric
    include libs.midnightlib.fabric

    // Development QoL
    modLocalRuntime libs.modmenu

    // Dependencies
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    from project(":common").sourceSets.main.resources

    def expandProps = [
            "version"                 : version,

            "minecraft_version"       : libs.versions.minecraft.get(),

            "fabric_loader_version"   : libs.versions.fabric.loader.get(),
            "fabric_biome_api_v1"     : libs.versions.fabricApi.biome.api.v1.get()
    ]

    inputs.properties(expandProps)

    filesMatching(['pack.mcmeta', '*.mod.json']) {
        expand expandProps
    }
}

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = base.archivesName.get()
            version = project.version
            artifact(remapJar) {
                builtBy remapJar
                classifier ''
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

if (System.getenv("CURSEFORGE_TOKEN")) {
    curseforge {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        project {
            id = '928703'
            releaseType = 'release'
            changelogType = 'markdown'
            changelog = file('../CHANGELOG.md')

            addGameVersion libs.versions.minecraft.get()
            addGameVersion 'Fabric'

            mainArtifact(remapJar) {
                displayName = 'RideableRavagers-' + project.version
            }
        }
        options {
            javaIntegration = false
            forgeGradleIntegration = false
            javaVersionAutoDetect = false
        }
    }
}