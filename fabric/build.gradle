plugins {
    alias libs.plugins.fabric.loom
}

base.archivesName = "${mod_name}-fabric-${libs.versions.minecraft.get()}-${version}"

dependencies {
    minecraft libs.minecraft
    mappings loom.officialMojangMappings()

    modImplementation libs.fabric.loader
    modImplementation libs.fabric.api

    implementation project(path: ':common', configuration: 'namedElements')
}

loom {
    runtimeOnlyLog4j = true

    if (project(":common:").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common:").file("src/main/resources/${mod_id}.accesswidener"))
    }

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    mods {
        "${mod_id}" {
            sourceSet("main")
            sourceSet("main", project(":common"))
        }
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
        }
        server {
            server()
            setConfigName("Fabric Server")
        }

        configureEach {
            runDir "../run/${it.configName.replace(' ', '_')}"
            ideConfigGenerated(true)
        }
    }
}

processResources {
    from project(":common").sourceSets.main.resources
    from project(":common").sourceSets.client.resources
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
    source(project(":common").sourceSets.client.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
    source(project(":common").sourceSets.client.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
    from(project(":common").sourceSets.client.allSource)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}