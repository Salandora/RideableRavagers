plugins {
    alias libs.plugins.shadow
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    runtimeOnlyLog4j = true

    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        client {
            client()
            setConfigName("Quilt Client")
        }
        server {
            server()
            setConfigName("Quilt Server")
        }

        configureEach {
            runDir "../run/${it.configName.replace(' ', '_')}"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

dependencies {
    modImplementation libs.quilt.loader
    modApi libs.quilted.fabric.api

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenQuilt(MavenPublication) {
            artifactId = base.archivesName.get()
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}


/*
apply plugin: libs.plugins.quilt.loom.get().getPluginId()

base.archivesName = "${mod_name}-quilt-${libs.versions.minecraft.get()}-${version}"

dependencies {
    minecraft libs.minecraft
    mappings loom.officialMojangMappings()

    modImplementation libs.quilt.loader
    modImplementation libs.quilted.fabric.api

    implementation project(path: ':common', configuration: 'namedElements')
}

loom {
    runtimeOnlyLog4j = true

    if (project(":common:").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common:").file("src/main/resources/${mod_id}.accesswidener"))
    }

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    mods {
        "${mod_id}" {
            sourceSet("main")
            sourceSet("main", project(":common"))
        }
    }

    runs {
        client {
            client()
            setConfigName("Quilt Client")
        }
        server {
            server()
            setConfigName("Quilt Server")
        }

        configureEach {
            runDir "../run/${it.configName.replace(' ', '_')}"
            ideConfigGenerated(true)
        }
    }
}

processResources {
    from project(":common").sourceSets.main.resources
    from project(":common").sourceSets.client.resources
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
    source(project(":common").sourceSets.client.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
    source(project(":common").sourceSets.client.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
    from(project(":common").sourceSets.client.allSource)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}*/
