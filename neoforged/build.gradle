plugins {
    alias libs.plugins.neogradle
    alias libs.plugins.mixingradle
}

base.archivesName = "${mod_name}-neoforged-${libs.versions.minecraft.get()}-${version}"

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.client.mixins.json")
//    config("${mod_id}.forge.mixins.json")
}

minecraft {
    mappings channel: 'official', version: libs.versions.minecraft.get()

    copyIdeResources = true //Calls processResources when in dev

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            taskName 'Client'
        }

        server {
            taskName 'Server'
            args '--nogui'
        }

        /*data {
            taskName 'Data'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }*/

        configureEach {
            workingDirectory rootProject.file("run/${it.taskName}")
            ideaModule "${rootProject.mod_name}.${project.mod_name}.main"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                    source project(":common").sourceSets.client
                }
            }
        }
    }
}

dependencies {
    minecraft libs.neoforge
    compileOnly project(":common")

    annotationProcessor(variantOf(libs.mixin) { classifier 'processor' })
}

processResources {
    from(project(":common").sourceSets.main.resources) {
        exclude '*.accesswidener'
    }
    from project(":common").sourceSets.client.resources
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
    source(project(":common").sourceSets.client.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
    source(project(":common").sourceSets.client.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
    from(project(":common").sourceSets.client.allSource)
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}