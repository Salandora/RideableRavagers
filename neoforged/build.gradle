apply plugin: libs.plugins.shadow.get().getPluginId()

architectury {
    injectInjectables = false
    platformSetupLoomIde()
    forge()
}

loom {
    runtimeOnlyLog4j = true

    accessWidenerPath.set(project(":common").loom.accessWidenerPath)

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "${mod_id}.common.mixins.json"
        // mixinConfig "${mod_id}.mixins.json"
    }

    runs {
        client {
            client()
            setConfigName("NeoForged Client")
        }
        server {
            server()
            setConfigName("NeoForged Server")
        }

        configureEach {
            runDir "../run/${it.configName.replace(' ', '_')}"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases/'
    }
}

dependencies {
    forge libs.neoforge

    modImplementation libs.midnightlib.forge
    include libs.midnightlib.forge

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    from project(":common").sourceSets.main.resources

    def expandProps = [
            "version"                 : version,

            "minecraft_version"       : libs.versions.minecraft.get(),
            "minecraft_version_range" : libs.versions.mc.range.get(),

            "neo_loader_version_range": libs.versions.neo.loader.range.get(),
            "neo_version_range"       : libs.versions.neo.range.get()
    ]

    inputs.properties(expandProps)

    filesMatching(['pack.mcmeta', 'META-INF/mods.toml']) {
        expand expandProps
    }
}

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = base.archivesName.get()
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}