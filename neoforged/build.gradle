plugins {
    alias libs.plugins.neogradle
    alias libs.plugins.mixingradle
}

base.archivesName = "${mod_name}-neoforged-${libs.versions.minecraft.get()}"

def dependencyProjects = [
        project.dependencies.project(path: ":common", configuration: "namedElements")
]

dependencyProjects.forEach {
    project.evaluationDependsOn(it.dependencyProject.path)
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.client.mixins.json")
//    config("${mod_id}.forge.mixins.json")
}

minecraft {
    mappings channel: 'official', version: libs.versions.minecraft.get()

    copyIdeResources = true //Calls processResources when in dev

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            taskName 'Client'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    dependencyProjects.each {
                        source it.dependencyProject.sourceSets.main
                        if (it.dependencyProject.hasProperty("sourceSets.client")) {
                            source it.dependencyProject.sourceSets.client
                        }
                    }
                }
            }
        }

        server {
            taskName 'Server'
            args '--nogui'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    dependencyProjects.each {
                        source it.dependencyProject.sourceSets.main
                    }
                }
            }

        }

        /*data {
            taskName 'Data'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }*/

        configureEach {
            workingDirectory rootProject.file("run/${it.taskName}")
            ideaModule "${rootProject.mod_name}.${project.mod_name}.main"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }
}

dependencies {
    minecraft libs.neoforge

    annotationProcessor(variantOf(libs.mixin) { classifier 'processor' })

    dependencyProjects.forEach {
        implementation it
    }
}

tasks {
    processResources {
        from(sourceSets.main.resources)
        for (p in dependencyProjects) {
            from(p.dependencyProject.sourceSets.main.resources)
            if (p.dependencyProject.hasProperty("sourceSets.client")) {
                from(p.dependencyProject.sourceSets.client.resources)
            }
        }
        exclude '*.accesswidener'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    jar {
        from(sourceSets.main.output)
        for (p in dependencyProjects) {
            from(p.dependencyProject.sourceSets.main.output)
            if (p.dependencyProject.hasProperty("sourceSets.client")) {
                from(p.dependencyProject.sourceSets.client.output)
            }
        }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    sourcesJar {
        from(sourceSets.main.allJava)
        for (p in dependencyProjects) {
            from(p.dependencyProject.sourceSets.main.allJava)
            if (p.hasProperty("sourceSets.client")) {
                from(p.dependencyProject.sourceSets.client.allJava)
            }
        }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

jar.finalizedBy("reobfJar")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}