plugins {
    alias libs.plugins.architectury.plugin apply false
    alias libs.plugins.architectury.loom apply false
    alias libs.plugins.vineflower apply false
    alias libs.plugins.paperweight.userdev apply false
    alias libs.plugins.shadow apply false
    alias libs.plugins.minotaur apply false
    alias libs.plugins.cursegradle apply false
}

subprojects {
    if (!["common", "fabric", "forge", "neoforged", "quilt"].contains(it.name)) {
        return
    }

    apply plugin: libs.plugins.architectury.plugin.get().getPluginId()
    apply plugin: libs.plugins.architectury.loom.get().getPluginId()
    apply plugin: libs.plugins.vineflower.get().getPluginId()

    architectury {
        minecraft = libs.versions.minecraft.get()
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft libs.minecraft
        mappings loom.officialMojangMappings()

        compileOnly libs.jetbrains.annotations
        implementation libs.findbugs
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://api.modrinth.com/maven" }
        maven {
            url = uri("https://maven.pkg.github.com/Salandora/MidnightLib")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("READ_PACKAGES_TOKEN")
            }
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    base.archivesName = rootProject.mod_name
    version = "${rootProject.mod_version}-${libs.versions.minecraft.get()}-${project.name}"
    if (rootProject == project) {
        version = "${rootProject.mod_version}-${libs.versions.minecraft.get()}"
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
        withSourcesJar()
        // withJavadocJar()
    }

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }

        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : rootProject.version,
                    'Implementation-Title'    : mod_name,
                    'Implementation-Version'  : rootProject.version,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : libs.versions.minecraft.get()
            ])
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
}
