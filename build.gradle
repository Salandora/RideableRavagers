plugins {
    alias libs.plugins.architectury.plugin
    alias libs.plugins.architectury.loom apply false
    alias libs.plugins.paperweight.userdev apply false
}

architectury {
    minecraft = libs.versions.minecraft.get()
}

subprojects {
    if (!["common", "fabric", "neoforged", "quilt"].contains(it.name)) {
        return
    }

    apply plugin: libs.plugins.architectury.plugin.get().getPluginId()
    apply plugin: libs.plugins.architectury.loom.get().getPluginId()

    base.archivesName = "${mod_name}-${it.name}-${libs.versions.minecraft.get()}"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft libs.minecraft
        mappings loom.officialMojangMappings()

        compileOnly libs.jetbrains.annotations
        implementation libs.findbugs
    }

    repositories {
        mavenCentral()
        maven {
            name 'Quilt (Release)'
            url 'https://maven.quiltmc.org/repository/release/'
        }

        maven {
            name 'Quilt (Snapshot)'
            url 'https://maven.quiltmc.org/repository/snapshot/'
            content {
                includeGroup 'org.quiltmc.fabric_api_qsl'
                includeGroupByRegex 'org\\.quiltmc\\.qsl(?:\\.[a-z_]+)?'
            }
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
        withSourcesJar()
        // withJavadocJar()
    }

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }

        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : rootProject.version,
                    'Implementation-Title'    : mod_name,
                    'Implementation-Version'  : rootProject.version,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : libs.versions.minecraft.get()
            ])
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        def expandProps = [
                "mod_name"                : mod_name,
                "version"                 : version,
                "group"                   : project.group, //Else we target the task's group.

                "minecraft_version"       : libs.versions.minecraft.get(),
                "minecraft_version_range" : libs.versions.mc.range.get(),

                "neo_version"             : libs.versions.neoforge.get(),
                "neo_loader_version_range": libs.versions.neo.loader.range.get(),
                "neo_version_range"       : libs.versions.neo.range.get(),

                "quilt_loader_version"    : libs.versions.quilt.loader.get(),
                "fabric_loader_version"   : libs.versions.fabric.loader.get(),

                "mod_author"              : mod_author,
                "mod_license"             : mod_license,
                "mod_description"         : project.description
        ]

        inputs.properties(expandProps)

        filesMatching(['pack.mcmeta', '*.mod.json', '*.mixins.json', 'META-INF/mods.toml', 'plugin.yml']) {
            expand expandProps
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
}
